 {/
   useEffect(() => {
    if (responseChangePassword) {
      setUser({})
      setSuccess(responseChangePassword.success)
      setErrorPassword(responseChangePassword.success)
    }
  }, [responseChangePassword])
 *<Box className={clsx(classes.textFieldWrapper, classes.marginTopBox)}>
                <Typography >
                  {t('credentialsRecovery.changePasswordInstructions')}
                </Typography>
                <TextField
                  id="currentPassword"
                  label={t('credentialsRecovery.currentPassword')}
                  variant="outlined"
                  type={showPassword ? 'text' : 'password'}
                  InputLabelProps={{ shrink: true }}
                  InputProps={{
                    endAdornment: (
                      <InputAdornment position="end">
                        <IconButton
                          aria-label="toggle password visibility"
                          onClick={handleClickShowPassword}
                          edge="end"
                        >
                          {showPassword ? <Visibility /> : <VisibilityOff />}
                        </IconButton>
                      </InputAdornment>
                    )
                  }}
                  value={user.currentPassword || ''}
                  onChange={(event) =>
                    handleSetField('currentPassword', event.target.value)
                  }
                  onKeyPress={(event) =>
                    executeCredentialsRecovery(event)
                  }
                  className={classes.marginTop}
                />
                <TextField
                  id="newPassword"
                  label={t('credentialsRecovery.newPassword')}
                  type={showPassword ? 'text' : 'password'}
                  variant="outlined"
                  InputLabelProps={{ shrink: true }}
                  InputProps={{
                    endAdornment: (
                      <InputAdornment position="end">
                        <IconButton
                          aria-label="toggle password visibility"
                          onClick={handleClickShowPassword}
                          edge="end"
                        >
                          {showPassword ? <Visibility /> : <VisibilityOff />}
                        </IconButton>
                      </InputAdornment>
                    )
                  }}
                  value={user.newPassword || ''}
                  onChange={(event) =>
                    handleSetField('newPassword', event.target.value)
                  }
                  onKeyPress={(event) =>
                    executeCredentialsRecovery(event)
                  }
                  className={classes.marginTop}
                />
                <Button
                  disabled={(!user.newPassword || !user.currentPassword || !validEmailFormat) || loadingChangePassword}
                  variant="contained"
                  color="secondary"
                  onClick={handleSubmitChangePassword}
                  className={classes.button}
                >
                  {t('credentialsRecovery.changePassword')}
                </Button>
                {loadingChangePassword && <CircularProgress />}
              </Box>
                */}